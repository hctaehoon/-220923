# # # # # 팀 노트 작성.

# # # # # https://github.com/ndb796/Python-competitive-Programming-Team-Notes
# # # # # 알고리즘 코딩 테스트.
# # # # # 그리디(쉬운 난이도)
# # # # # 구현
# # # # # DFS/BFS를 활용한 탐색.

# # # # # 복잡도
# # # # # 시간 복잡도:특정한 크기의 입력에 대하여 알고리즘의 수행 시간 분석
# # # # # 공간 복잡도:특정한 크기의 입력에 대하여          메모리 사용량 분석

# # # # # 동일한 기능을 수행한다면 복잡도가 낮을수록 좋은 알고리즘.


# # # # # 빅오 표기법
# # # # # 가장 빠르게 증가하는 항만을 고려하는 표기법.
# # # # # 함수의 상한만을 나타냄.
# # # # # EX) 3N^3+5N^2+1,000,000 인 알고리즘.
# # # # # 빅오 표기법에선 차수가 가장 큰 항만 남기므로 0(N^3)으로 표현됩니다.

# # # # # -
# # # # # 순위 상수 시간 > 로그 시간 > 선형 시간 > 로그 선형 시간 > 이차 시간 > 삼차 시간 > 지수 시간 > 점수 좋음>>나쁨

# # # # # array = [3,5,1,2,4] #N=5
# # # # # summary = 0 #합계를 저장할 변수

# # # # # for x in array:
# # # # #   summary += x
# # # # # print(summary)

# # # # #수행 시간은 데이터의 개수 N에 비례할 것임을 예측. 시간 복잡도: 0(N)


# # # # #이중 반복문을 이용
# # # # from socket import TIPC_ADDR_ID
# # # # from tkinter import Toplevel


# # # # array = [3,5,1,2,4]

# # # # for i in array:
# # # #   for j in array:
# # # #     temp = i*j
# # # #     print(temp)
# # # # #시간 복잡도 : 0(N2) 모든 박복문의 시간 복잡도는 아니지만 소스코드가 내부적으로 다른 함수를 호출 시 그 시간 복잡도까지 고려
# # # # 알고리즘 설계 TIP

# # # # 일반적으로 CPU 기반의 개인 컴퓨터에서 연산 횟수가 5억을 넘어가는 경우:
# # # #   파이썬 기준 통상 5~15초 가량의 시간이 소요.
# # # # 0(N3)의 알고리즘 설계 시 N이 5,000 이상일 시?
# # # # 코테는 보통 5~10초.
# # # 시간제한 1초 기준
# # # N 500 : O(N3)
# # # N 2000 : 0(N2)
# # # N 1000000:O(NlogN)
# # # N 100000000:0(N)인 알고리즘 설계시 문제 풀 수 있음.

# # # 알고리즘 문제 해결 과정.
# # # 1. 지문 읽기 및 컴퓨터적 사고
# # # 2. 요구사항 분석
# # # 3. 문제 해결을 위한 아이디어 찾기. 핵심 아이디어 찾으면 간결하게 설계 가능.
# # # 4. 소스코드 설계 및 코딩

# # # 수행 시간 측정 소스코드 예제

# # # import time
# # # start_time = time.time() #측정 시작

# # # #프로그램 소스코드입력 >>> 프로그램 수행 시간 출력.
# # # end_time=time.time()
# # # print("time:", end_time - start_time) 

# # # 자료형
# # # 데이터를 다루는 행위.
# # # 정수형 실수형 복소수형 문자열 리스트 튜플 딕셔너리 등이 있음.

# # # 모든 프로그래밍은 결국 데이터를 다루는 행위입니다.
# # #  자료형에 대한 이해는 프로그래밍의 길에 있어서의 첫걸음이라고 할 수 있습니다.
 
# # # 정수형, 실수형 핵심**** 양의정수, 음의정수 0 포함.
# # # 정수형이 주로 코테에 사용.

# # # 실수형
# # #  소수점 아래의 데이트를 포함하는 수 자료형
# # #  파이썬에서는 변수에 소수점을 붙인 수를 대입하면 실수형 변수로 처리.
# # #  소수부가 0이거나, 정수부가 0인 소수는 0을 생략하고 작성할 수 있습니다. ex) .7
 
# # a=157.93
# # print(a)

# # b=-.7
# # print(b)
# 지수 표현 방식

# e나 E로.?
# 예를 들어 1e9는 10의 9제곱이다?
# 임의의 큰 수를 표현하기 위해 자주 사용
# 유효숫자e지수=유효숫자X10지수
# 최단 경로 알고리즘에서는 도달할 수 없는 노드에 대하여 최단 거리를 무한(INF)로 설정함.
# 가능한 최댓값이 10억 미만이라면 무한의 값으로 1e9로 표현가능

a=int(1e9)
print(a)
a=75.25e1
print(a)

오늘날 가장 널리 쓰이는 IEEE754 표준에서는 실수형을 저장하기 위해 4바이트 혹은 8바이트의 고정된 크기의 메모리를
할당하므로, 컴퓨터 시스템은 실수 정보를 표현하는 정확도에 한계를 가집니다.
10진수 체계에서는 0.3과 0.6을 더하면 0.9지만 2진수에선 표현방법이 없음.
컴퓨터에서는 최대한 가깝게 표현하지만 미세한 오차가 발생하게 됩니다.